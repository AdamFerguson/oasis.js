output "dist"

class BrowserIIFE < Rake::Pipeline::Filter
  def generate_output(inputs, output)
    inputs.each do |file|
      output.write %{(function(exports) {\n#{file.read}\nexports.Oasis = requireModule('oasis');\n})(this);}
    end
  end
end

require "js_module_transpiler"
require "pry"

class ModuleTranspiler < Rake::Pipeline::Filter
  def initialize(options, &block)
    @type = options[:type]
    @name = options[:name]
    @into = options[:into]
    super(&block)
  end

  def generate_output(inputs, output)
    inputs.each do |input|
      name = @name || input.path.chomp(".js")
      converter = JsModuleTranspiler::Compiler.new(input.read, name, into: @into)
      output.write converter.send("to_#{@type}")
    end
  end
end

class Polyglotter < Rake::Pipeline::Filter
  def initialize(*args, &block)
    verify_jsframe_in_path!
    super
  end

  def verify_jsframe_in_path!
    `which jsframe`
    unless $?.success?
      raise "Cannot find `jsframe` in path.  Try `npm install -g jsframe`"
    end
  end

  def generate_output(inputs, output)
    inputs.each do |file|
      output.write `jsframe #{file.fullpath}`
    end
  end
end

input "lib" do
  match "{oasis,oasis/.*}.js" do
    filter ModuleTranspiler, type: :amd do |input|
      input.sub(/\.js$/, '.amd.js')
    end
  end

  match "{loader,uuid.core,kamino,message_channel,rsvp.amd,oasis.amd,oasis/.*}.js" do
    concat ["loader.js", "uuid.core", "kamino", "message_channel", "rsvp.amd.js", "oasis.js"], "oasis.js.html"
    filter BrowserIIFE
    filter Polyglotter
  end
end

input "test" do
  output "tmp/tests"
  concat
end

# vim: filetype=ruby
